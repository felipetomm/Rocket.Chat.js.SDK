{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/lib/log.ts"],"names":[],"mappings":";;AAEA;IACE,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;IACvB,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE,CAAA;IAC9I,OAAO,QAAQ,CAAA;AACjB,CAAC;AAED,uDAAuD;AACvD;IACE,KAAK,CAAE,GAAG,IAAW;QACnB,OAAO,CAAC,GAAG,CAAC,CAAC,WAAW,WAAW,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,CAAC,CAAA;IACrD,CAAC;IACD,IAAI,CAAE,GAAG,IAAW;QAClB,OAAO,CAAC,GAAG,CAAC,CAAC,UAAU,WAAW,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,CAAC,CAAA;IACpD,CAAC;IACD,OAAO,CAAE,GAAG,IAAW;QACrB,OAAO,CAAC,IAAI,CAAC,CAAC,aAAa,WAAW,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,CAAC,CAAA;IACxD,CAAC;IACD,IAAI,CAAE,GAAG,IAAW;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAA;IAC9B,CAAC;IACD,KAAK,CAAE,GAAG,IAAW;QACnB,OAAO,CAAC,KAAK,CAAC,CAAC,WAAW,WAAW,EAAE,IAAI,EAAC,GAAG,IAAI,CAAC,CAAC,CAAA;IACvD,CAAC;CACF;AAED,IAAI,MAAM,GAAY,IAAI,WAAW,EAAE,CAAA;AAiBrC,wBAAM;AAfR,oBAAqB,WAAoB;IACvC,iBAAA,MAAM,GAAG,WAAW,CAAA;AACtB,CAAC;AAcC,gCAAU;AAZZ;IACE,UAAU,CAAC;QACT,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI;QACjB,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;QAChB,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;QAChB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI;QACnB,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI;KAClB,CAAC,CAAA;AACJ,CAAC;AAKC,0BAAO","sourcesContent":["import { ILogger } from '../config/driverInterfaces'\n\nfunction getDateTime (): string {\n  const date = new Date()\n  const response = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n  return response\n}\n\n/** Temp logging, should override form adapter's log */\nclass InternalLog implements ILogger {\n  debug (...args: any[]) {\n    console.log([`[debug] ${getDateTime()}: `,...args])\n  }\n  info (...args: any[]) {\n    console.log([`[info] ${getDateTime()}: `,...args])\n  }\n  warning (...args: any[]) {\n    console.warn([`[warning] ${getDateTime()}: `,...args])\n  }\n  warn (...args: any[]) { // legacy method\n    return this.warning(...args)\n  }\n  error (...args: any[]) {\n    console.error([`[error] ${getDateTime()}: `,...args])\n  }\n}\n\nlet logger: ILogger = new InternalLog()\n\nfunction replaceLog (externalLog: ILogger) {\n  logger = externalLog\n}\n\nfunction silence () {\n  replaceLog({\n    debug: () => null,\n    info: () => null,\n    warn: () => null,\n    warning: () => null,\n    error: () => null\n  })\n}\n\nexport {\n  logger,\n  replaceLog,\n  silence\n}\n"]}